diff -rupN linux-sh4-orig/arch/sh/boards/mach-mb442/mach.c linux-sh4/arch/sh/boards/mach-mb442/mach.c
--- linux-sh4-orig/arch/sh/boards/mach-mb442/mach.c	2015-11-05 21:54:42.000000000 +0100
+++ linux-sh4/arch/sh/boards/mach-mb442/mach.c	2014-07-25 00:59:52.000000000 +0200
@@ -43,10 +43,10 @@ static void __init mb442_init_irq(void)
 	/* Set the ILC to route external interrupts to the the INTC */
 	/* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
 	/* Inputs sys-irq2 and 3 are unused (pulled high) */
-	ilc_route_external(ILC_EXT_IRQ0, 4, 0);		/* SMC Ethernet */
-	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* ATA */
-	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* Unused */
-	ilc_route_external(ILC_EXT_MDINT, 7, 0);	/* STe100 PHY */
+//	ilc_route_external(ILC_EXT_IRQ0, 4, 0);		/* SMC Ethernet */
+	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* NBOX LAN */
+//	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* Unused */
+//	ilc_route_external(ILC_EXT_MDINT, 7, 0);	/* STe100 PHY */
 }
 
 void __init mb442_setup(char**);
diff -rupN linux-sh4-orig/arch/sh/boards/mach-mb442/setup.c linux-sh4/arch/sh/boards/mach-mb442/setup.c
--- linux-sh4-orig/arch/sh/boards/mach-mb442/setup.c	2015-11-05 21:54:42.000000000 +0100
+++ linux-sh4/arch/sh/boards/mach-mb442/setup.c	2014-07-25 00:59:52.000000000 +0200
@@ -18,18 +18,37 @@
 #include <linux/delay.h>
 #include <linux/spi/spi.h>
 #include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h> 
+#include <linux/stm/nand.h> 
+#include <linux/mtd/partitions.h> 
 #include <linux/mtd/physmap.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
-
-
-
-#define MB442_PIO_STE100P_RESET stm_gpio(2, 4)
-#define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
-#define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
-
-
+#include <linux/bpa2.h>
+#include <linux/stm/emi.h>
+#include <linux/stm/gpio.h> 
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", "v4l2-coded-video-buffers", NULL };
+
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+      {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+            },
+            {
+                .name  = "LMI_SYS",
+                .start = 0,
+                .size  = 0x01C00000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+            }
+        };
 
 void __init mb442_setup(char** cmdline_p)
 {
@@ -40,20 +59,19 @@ void __init mb442_setup(char** cmdline_p
 	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
 			.is_console = 1, });
-	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
-			.is_console = 0, });
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+
 }
 
 static struct resource mb442_smc91x_resources[] = {
 	[0] = {
-		.start	= 0x02000300,
-		.end	= 0x02000300 + 0xff,
+		.start	= 0x00c00000,
+		.end	= 0x00c3ffff,
 		.flags	= IORESOURCE_MEM,
 	},
 	[1] = {
-		.start	= IRL0_IRQ,
-		.end	= IRL0_IRQ,
+		.start	= IRL1_IRQ,
+		.end	= IRL1_IRQ,
 		.flags	= IORESOURCE_IRQ,
 	},
 };
@@ -64,53 +82,95 @@ static struct platform_device mb442_smc9
 	.num_resources	= ARRAY_SIZE(mb442_smc91x_resources),
 	.resource	= mb442_smc91x_resources,
 };
+/*
+static struct mtd_partition mb442_nand_flash_partitions[] = {
+	{
+		.name	= "rootfs",
+		.offset	= 0,
+		.size 	= 0x03c00000	//nand 64MB
+		//.size 	= 0x07c00000	//nand 128MB
+	}, {
+		.name	= "kernel",
+		.offset	= MTDPART_OFS_APPEND,
+		.size	= MTDPART_SIZ_FULL
+	},
+};
 
-static void mb442_set_vpp(struct map_info *info, int enable)
-{
-	gpio_set_value(MB442_PIO_FLASH_VPP, enable);
-}
+struct stm_nand_bank_data nand_bank_data = {
 
-static struct platform_device mb442_physmap_flash = {
-	.name		= "physmap-flash",
-	.id		= -1,
-	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
+	.csn		= 1,
+	.nr_partitions	= ARRAY_SIZE(mb442_nand_flash_partitions),
+	.partitions	= mb442_nand_flash_partitions,
+	.options	= NAND_NO_AUTOINCR,
+	.timing_data	= &(struct stm_nand_timing_data) {
+	.sig_setup	= 40,		// times in ns 
+	.sig_hold	= 40,
+	.CE_deassert	= 0,
+	.WE_to_RBn	= 100,
+	.wr_on		= 0,
+	.wr_off		= 10,
+	.rd_on		= 0,
+	.rd_off		= 10,
+	.chip_delay	= 25,			// in us 
+},
+	.emi_withinbankoffset	= 0,
+};
+
+static struct platform_device mb442_nand_device = { 
+	.name		= "stm-nand-emi", 
+	.dev.platform_data = &(struct stm_plat_nand_emi_data){ 
+	.nr_banks	= 1,
+	.banks		= &nand_bank_data,
+	.emi_rbn_gpio	= stm_gpio(4, 5), 
 	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.set_vpp	= mb442_set_vpp,
+};
+*/
+
+static struct mtd_partition nand_partitions[] = {
+	{
+		.name	= "rootfs",
+		.offset	= 0,
+		.size 	= 0x03c00000	//64MB
+		//.size 	= 0x07c00000	//128MB
+	}, {
+		.name	= "kernel",
+		.offset	= MTDPART_OFS_APPEND,
+		.size	= MTDPART_SIZ_FULL
 	},
 };
 
+static struct nand_config_data nbox_nand_config = {
+	.emi_bank		= 1,
+	.emi_withinbankoffset	= 0,
+
+	/* Timings for NAND512W3A */
+	.emi_timing_data = &(struct emi_timing_data) {
+		.rd_cycle_time	 = 40,		 /* times in ns */
+		.rd_oee_start	 = 0,
+		.rd_oee_end	 = 10,
+		.rd_latchpoint	 = 10,
+		.busreleasetime  = 0,
+
+		.wr_cycle_time	 = 40,
+		.wr_oee_start	 = 0,
+		.wr_oee_end	 = 10,
 
-static int mb442_phy_reset(void* bus)
-{
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-
-	return 1;
-}
+		.wait_active_low = 0,
+	},
 
-#define STMMAC_PHY_ADDR 14
-static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
-	[STMMAC_PHY_ADDR] = IRL3_IRQ,
-};
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
-	.bus_id = 0,
-	.phy_reset = mb442_phy_reset,
-	.phy_mask = 1,
-	.irqs = stmmac_phy_irqs,
+	.chip_delay		= 40,		/* time in us */
+	.mtd_parts		= nand_partitions,
+	.nr_parts		= ARRAY_SIZE(nand_partitions),
+	.rbn_port		= 4,
+	.rbn_pin		= 5
 };
 
 static struct platform_device *mb442_devices[] __initdata = {
 	&mb442_smc91x_device,
-	&mb442_physmap_flash,
+	//&mb442_nand_device,
 };
 
+
 static int __init mb442_device_init(void)
 {
 	stx7100_configure_sata();
@@ -120,8 +180,7 @@ static int __init mb442_device_init(void
 			.out1_enabled = 1, });
 
 	stx7100_configure_ssc_i2c(0, NULL);
-	stx7100_configure_ssc_spi(1, NULL);
-	stx7100_configure_ssc_i2c(2, NULL);
+	stx7100_configure_ssc_i2c(1, NULL);
 
 	stx7100_configure_usb();
 
@@ -130,32 +189,7 @@ static int __init mb442_device_init(void
 			.tx_enabled = 0,
 			.tx_od_enabled = 0, });
 
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
-	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
-
-	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
-	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
-
-	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
-			.mode = stx7100_ethernet_mode_mii,
-			.ext_clk = 0,
-			.phy_bus = 0,
-			.phy_addr = STMMAC_PHY_ADDR,
-			.mdio_bus_data = &stmmac_mdio_bus,
-		});
-
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
+	stx7100_configure_nand(&nbox_nand_config);
 
 	return platform_add_devices(mb442_devices,
 			ARRAY_SIZE(mb442_devices));
diff -rupN linux-sh4-orig/drivers/ata/sata_stm.c linux-sh4/drivers/ata/sata_stm.c
--- linux-sh4-orig/drivers/ata/sata_stm.c	2015-11-05 21:54:44.000000000 +0100
+++ linux-sh4/drivers/ata/sata_stm.c	2014-07-25 01:00:14.000000000 +0200
@@ -871,6 +871,8 @@ static unsigned stm_sata_dma_irq(struct
 	} else if (readl(mmio + DMAC_RAWERR) & 1) {
 		ata_port_printk(ap, KERN_ERR, "DMA error asserted\n");
 	}
+	
+	else handled = 0;
 
 	return handled;
 
@@ -951,20 +953,20 @@ static irqreturn_t stm_sata_interrupt(in
 	struct ata_host *host = dev_instance;
 	unsigned int handled = 0;
 	unsigned int i;
-	struct stm_host_priv *hpriv = host->private_data;
 
 DPRINTK("ENTER\n");
 
 	spin_lock(&host->lock);
 
-	for (i = 0; i < host->n_ports; i++) {
-		if (hpriv->shared_dma_host_irq)
-			handled += stm_sata_dma_irq(host->ports[i]);
-		handled += stm_sata_host_irq(host->ports[i]);
+	for (i = 0; i < host->n_ports; i++) 
+	   {
+		handled += stm_sata_dma_irq(host->ports[i]);
+		if (!(handled)) handled += stm_sata_host_irq(host->ports[i]);
+		else handled = 0;
 	}
 
 	spin_unlock(&host->lock);
-
+	
 	return IRQ_RETVAL(handled);
 }
 
@@ -1178,6 +1180,26 @@ static int stm_sata_AHB_boot(struct devi
 	return 0;
 }
 
+static unsigned char stm_readb(const volatile void __iomem *addr)
+{
+	return readl(addr);
+}
+
+static unsigned short stm_readw(const volatile void __iomem *addr)
+{
+	return readl(addr);
+}
+
+static void stm_writeb(unsigned char b, volatile void __iomem *addr)
+{
+	writel(b, addr);
+}
+
+static void stm_writew(unsigned short b, volatile void __iomem *addr)
+{
+	writel(b, addr);
+}
+
 static int __devinit stm_sata_probe(struct platform_device *pdev)
 {
 	struct stm_plat_sata_data *sata_private_info = pdev->dev.platform_data;
@@ -1211,6 +1233,9 @@ static int __devinit stm_sata_probe(stru
 	if (!hpriv->device_state)
 		return -EBUSY;
 
+	if (!hpriv->device_state)
+		return -EBUSY; 
+
 	mem_res = platform_get_resource(pdev,IORESOURCE_MEM,0);
 	phys_base = mem_res->start;
 	phys_size = mem_res->end - mem_res->start + 1;
@@ -1251,9 +1276,11 @@ static int __devinit stm_sata_probe(stru
 	       hpriv->softsg ? "soft" : "hard");
 
 	if (sata_private_info->only_32bit) {
-		printk(KERN_ERR DRV_NAME " hardware doesn't support "
-			"byte/long ops, giving up\n");
-		return -EINVAL;
+		printk(KERN_DEBUG DRV_NAME " forcing all byte/word ops to long\n");
+		stm_ops.readb = stm_readb;
+		stm_ops.readw = stm_readw;
+		stm_ops.writeb = stm_writeb;
+		stm_ops.writew = stm_writew;
 	}
 
 	sata_rev = readl(mmio_base + SATA_VERSIONR);
diff -rupN linux-sh4-orig/drivers/char/lirc/lirc_stm.c linux-sh4/drivers/char/lirc/lirc_stm.c
--- linux-sh4-orig/drivers/char/lirc/lirc_stm.c	2015-11-05 21:54:44.000000000 +0100
+++ linux-sh4/drivers/char/lirc/lirc_stm.c	2014-07-25 01:00:02.000000000 +0200
@@ -882,7 +882,7 @@ static inline void lirc_stm_rx_reset_dat
 	rx.error = 0;
 	rx.off_rbuf = 0;
 	rx.sumUs = 0;
-	memset(rx.rbuf, 0, LIRC_STM_BUFSIZE);
+	memset(rx.rbuf, 0, (LIRC_STM_BUFSIZE*4));	//freebox
 }
 
 static void lirc_stm_rx_interrupt(int irq, void *dev_id)
@@ -1376,7 +1376,7 @@ static int lirc_stm_probe(struct platfor
 	 */
 
 	if ((rx.rbuf = (lirc_t *) devm_kzalloc(dev,
-					       LIRC_STM_BUFSIZE,
+					       (LIRC_STM_BUFSIZE*4),	//freebox
 					       GFP_KERNEL)) == NULL)
 		return -ENOMEM;
 
diff -rupN linux-sh4-orig/drivers/mtd/nand/plat_nand.c linux-sh4/drivers/mtd/nand/plat_nand.c
--- linux-sh4-orig/drivers/mtd/nand/plat_nand.c	2015-11-05 21:54:47.000000000 +0100
+++ linux-sh4/drivers/mtd/nand/plat_nand.c	2014-07-25 01:00:13.000000000 +0200
@@ -16,6 +16,7 @@
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
+#include <linux/stm/pio.h>
 
 struct plat_nand_data {
 	struct nand_chip	chip;
@@ -63,15 +64,17 @@ static int __devinit plat_nand_probe(str
 
 	data->mtd.name = dev_name(&pdev->dev);
 
-	data->chip.IO_ADDR_R = data->io_base;
-	data->chip.IO_ADDR_W = data->io_base;
+//	data->chip.IO_ADDR_R = data->io_base;
+//	data->chip.IO_ADDR_W = data->io_base;
+	data->chip.IO_ADDR_R = (void __iomem *)data->io_base;
+	data->chip.IO_ADDR_W = (void __iomem *)(data->io_base + 0x400000);
 	data->chip.cmd_ctrl = pdata->ctrl.cmd_ctrl;
 	data->chip.dev_ready = pdata->ctrl.dev_ready;
 	data->chip.select_chip = pdata->ctrl.select_chip;
 	data->chip.write_buf = pdata->ctrl.write_buf;
 	data->chip.read_buf = pdata->ctrl.read_buf;
 	data->chip.chip_delay = pdata->chip.chip_delay;
-	data->chip.options |= pdata->chip.options;
+	data->chip.options |= NAND_NO_AUTOINCR;//pdata->chip.options;
 
 	data->chip.read_buf = pdata->ctrl.read_buf;
 	data->chip.write_buf = pdata->ctrl.write_buf;
diff -rupN linux-sh4-orig/drivers/mtd/nand/stm_nand_emi.c linux-sh4/drivers/mtd/nand/stm_nand_emi.c
--- linux-sh4-orig/drivers/mtd/nand/stm_nand_emi.c	2015-11-05 21:54:47.000000000 +0100
+++ linux-sh4/drivers/mtd/nand/stm_nand_emi.c	2014-07-25 01:00:13.000000000 +0200
@@ -37,6 +37,7 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/nand.h>
 #include <asm/dma.h>
+#include <linux/stm/pio.h>
 
 #include "stm_nand_bbt.h"
 
@@ -45,7 +46,7 @@
 #endif
 
 #define NAME	"stm-nand-emi"
-
+struct stpio_pin *nand_ce_pin = NULL;
 /*
  * Private data for stm_emi_nand driver.  Concurrency and device locking
  * handled by MTD layers.
@@ -463,12 +464,24 @@ static void nand_cmd_ctrl_emi(struct mtd
 
 	if (ctrl & NAND_CTRL_CHANGE) {
 		if (ctrl & NAND_CLE) {
-			this->IO_ADDR_W = data->io_cmd;
-		} else if (ctrl & NAND_ALE) {
-			this->IO_ADDR_W = data->io_addr;
-		} else {
-			this->IO_ADDR_W = data->io_base;
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(1 << 17));
+		}
+		else {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W & ~(unsigned int)(1 << 17));
+		}
+
+		if (ctrl & NAND_ALE) {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(1 << 16));
+		}
+		else {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W & ~(unsigned int)(1 << 16));
 		}
+	if (ctrl & NAND_NCE) {
+		    stpio_set_pin(nand_ce_pin, 0); 
+			}
+			else {
+			stpio_set_pin(nand_ce_pin, 1); 
+		}	
 	}
 
 	if (cmd != NAND_CMD_NONE)
@@ -730,10 +743,10 @@ static struct stm_nand_emi * __devinit n
 		goto out4;
 	}
 
-	data->io_addr = ioremap_nocache(data->emi_base | (1 << 18), 1);
+	data->io_addr = ioremap_nocache(data->emi_base | (1 << 16), 1);
 	if (!data->io_addr) {
 		printk(KERN_ERR NAME ": ioremap failed for io_addr 0x%08x\n",
-		       data->emi_base | (1 << 18));
+		       data->emi_base | (1 << 16));
 		res = -ENOMEM;
 		goto out5;
 	}
@@ -746,8 +759,8 @@ static struct stm_nand_emi * __devinit n
 	/* Assign more sensible name (default is string from nand_ids.c!) */
 	data->mtd.name = dev_name(&pdev->dev);
 
-	data->chip.IO_ADDR_R = data->io_base;
-	data->chip.IO_ADDR_W = data->io_base;
+	data->chip.IO_ADDR_R = 0xA0400000;
+	data->chip.IO_ADDR_W = 0xA0800000;
 	data->rbn_gpio = -1;
 	data->chip.chip_delay = 50;
 	data->chip.cmd_ctrl = nand_cmd_ctrl_emi;
@@ -913,7 +926,7 @@ static int __devinit stm_nand_emi_probe(
 			GFP_KERNEL);
 	if (!group)
 		return -ENOMEM;
-
+	nand_ce_pin = stpio_request_set_pin(3, 6, "nand_sel", STPIO_OUT, 0);
 	rbn_gpio = pdata->emi_rbn_gpio;
 	if (gpio_is_valid(rbn_gpio)) {
 		err = gpio_request(rbn_gpio, "nand_RBn");
diff -rupN linux-sh4-orig/drivers/net/smc91x.c linux-sh4/drivers/net/smc91x.c
--- linux-sh4-orig/drivers/net/smc91x.c	2015-11-05 21:54:48.000000000 +0100
+++ linux-sh4/drivers/net/smc91x.c	2014-07-25 01:00:03.000000000 +0200
@@ -234,7 +234,6 @@ static void PRINT_PKT(u_char *buf, int l
 	}								\
 } while (0)
 
-
 /*
  * this does a soft reset on the device
  */
@@ -269,6 +268,10 @@ static void smc_reset(struct net_device
 	SMC_SELECT_BANK(lp, 0);
 	SMC_SET_RCR(lp, RCR_SOFTRST);
 
+    	msleep(100); // d-mon
+    	SMC_SET_RCR(lp, RCR_CLEAR);
+    	msleep(60);
+
 	/*
 	 * Setup the Configuration Register
 	 * This is necessary because the CONFIG_REG is not affected
@@ -309,6 +312,8 @@ static void smc_reset(struct net_device
 	SMC_SET_RCR(lp, RCR_CLEAR);
 	SMC_SET_TCR(lp, TCR_CLEAR);
 
+    	udelay(5); // d-mon
+
 	SMC_SELECT_BANK(lp, 1);
 	ctl = SMC_GET_CTL(lp) | CTL_LE_ENABLE;
 
@@ -325,6 +330,8 @@ static void smc_reset(struct net_device
 
 	/* Reset the MMU */
 	SMC_SELECT_BANK(lp, 2);
+	udelay(5); // d-mon
+
 	SMC_SET_MMU_CMD(lp, MC_RESET);
 	SMC_WAIT_MMU_BUSY(lp);
 }
@@ -349,7 +356,9 @@ static void smc_enable(struct net_device
 	SMC_SET_MAC_ADDR(lp, dev->dev_addr);
 
 	/* now, enable interrupts */
-	mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	//mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	mask = IM_ERCV_INT|IM_ALLOC_INT|IM_RCV_INT | IM_MDINT; // d-mon
+
 	if (lp->version >= (CHIP_91100 << 4))
 		mask |= IM_MDINT;
 	SMC_SELECT_BANK(lp, 2);
@@ -1117,10 +1126,14 @@ static void smc_phy_configure(struct wor
 	 * Enable PHY Interrupts (for register 18)
 	 * Interrupts listed here are disabled
 	 */
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+
 	smc_phy_write(dev, phyaddr, PHY_MASK_REG,
 		PHY_INT_LOSSSYNC | PHY_INT_CWRD | PHY_INT_SSD |
 		PHY_INT_ESD | PHY_INT_RPOL | PHY_INT_JAB |
 		PHY_INT_SPDDET | PHY_INT_DPLXDET);
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
 
 	/* Configure the Receive/Phy Control register */
 	SMC_SELECT_BANK(lp, 0);
@@ -2354,7 +2367,11 @@ static int __devinit smc_drv_probe(struc
 		ret = -ENOMEM;
 		goto out_release_attrib;
 	}
-
+	
+	
+	platform_set_drvdata(pdev, ndev);
+	//ret = smc_probe(ndev, addr);
+	
 #ifdef CONFIG_ARCH_PXA
 	{
 		struct smc_local *lp = netdev_priv(ndev);
diff -rupN linux-sh4-orig/drivers/net/smc91x.h linux-sh4/drivers/net/smc91x.h
--- linux-sh4-orig/drivers/net/smc91x.h	2015-11-05 21:54:48.000000000 +0100
+++ linux-sh4/drivers/net/smc91x.h	2014-07-25 01:00:03.000000000 +0200
@@ -250,16 +250,19 @@ SMC_outw(u16 val, void __iomem *ioaddr,
  * to do a SMC_outl, which on a 16 bit bus translates into two 16 bit writes.
  * This bypasses the special logic which would prevent this also updating
  * this interrupt mask register. */
-#define SMC_CAN_USE_8BIT	1
+#define SMC_CAN_USE_8BIT	0
 #define SMC_CAN_USE_16BIT	1
 #define SMC_CAN_USE_32BIT	0
 #define SMC_CAN_USE_32BIT_DATA	1
-#define SMC_IO_SHIFT		0
+#define SMC_IO_SHIFT		14
+    
+    #undef  SMC_USE_PXA_DMA
+     
 #else
 #error Unknown board
 #endif
 
-#define SMC_NOWAIT		0
+#define SMC_NOWAIT		1
 #define SMC_IRQ_FLAGS		0
 
 #ifdef SMC_STEM_BS_MASK
diff -rupN linux-sh4-orig/drivers/stm/stx7100.c linux-sh4/drivers/stm/stx7100.c
--- linux-sh4-orig/drivers/stm/stx7100.c	2015-11-05 21:54:49.000000000 +0100
+++ linux-sh4/drivers/stm/stx7100.c	2014-07-25 00:59:54.000000000 +0200
@@ -26,6 +26,9 @@
 #include <linux/stm/stx7100.h>
 #include <asm/irq-ilc.h>
 
+#include <linux/mtd/nand.h>
+#include <linux/mtd/partitions.h>
+#include <linux/stm/pio.h>
 
 
 /* EMI resources ---------------------------------------------------------- */
@@ -125,11 +128,152 @@ void __init stx7100_configure_pata(struc
 
 
 
+/* NAND Resources ---------------------------------------------------------- */
+static void nand_cmd_ctrl(struct mtd_info *mtd, int cmd, unsigned int ctrl)
+{
+	struct nand_chip *this = mtd->priv;
+
+	if (ctrl & NAND_CTRL_CHANGE) {
+
+		if (ctrl & NAND_CLE)
+			this->IO_ADDR_W = (void *)
+				((unsigned int)this->IO_ADDR_W |
+				 (unsigned int)(1 << 17));
+		else
+			this->IO_ADDR_W = (void *)
+				((unsigned int)this->IO_ADDR_W &
+				 ~(unsigned int)(1 << 17));
+
+		if (ctrl & NAND_ALE)
+			this->IO_ADDR_W = (void *)
+				((unsigned int)this->IO_ADDR_W |
+				 (unsigned int)(1 << 16));
+		else
+			this->IO_ADDR_W = (void *)
+				((unsigned int)this->IO_ADDR_W &
+				 ~(unsigned int)(1 << 16));
+	}
+
+	if (ctrl & NAND_NCE)
+		stpio_request_set_pin(3,6,"nandready",STPIO_OUT,0);
+
+	if (cmd != NAND_CMD_NONE)
+		writeb(cmd, this->IO_ADDR_W);
+}
+
+static void nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
+{
+	int i;
+	struct nand_chip *chip = mtd->priv;
+
+	/* write buf up to 4-byte boundary */
+	while ((unsigned int)buf & 0x3) {
+		writeb(*buf++, chip->IO_ADDR_W);
+		len--;
+	}
+
+	writesl(chip->IO_ADDR_W, buf, len/4);
+
+	/* mop up trailing bytes */
+	for (i = (len & ~0x3); i < len; i++)
+		writeb(buf[i], chip->IO_ADDR_W);
+}
+
+static void nand_read_buf(struct mtd_info *mtd, uint8_t *buf, int len)
+{
+	int i;
+	struct nand_chip *chip = mtd->priv;
+
+	/* read buf up to 4-byte boundary */
+	while ((unsigned int)buf & 0x3) {
+		*buf++ = readb(chip->IO_ADDR_R);
+		len--;
+	}
+
+	readsl(chip->IO_ADDR_R, buf, len/4);
+
+	/* mop up trailing bytes */
+	for (i = (len & ~0x3); i < len; i++)
+		buf[i] = readb(chip->IO_ADDR_R);
+}
+
+static const char *nand_part_probes[] = { "cmdlinepart", NULL };
+
+static struct stpio_pin *nand_RBn_pio = NULL;
+ 
+static int nand_device_ready(struct mtd_info *mtd) {
+ 
+        return stpio_get_pin(nand_RBn_pio);
+}
+
+static struct platform_device nand_flash[] = {
+	EMI_NAND_DEVICE(0),
+	EMI_NAND_DEVICE(1),
+	EMI_NAND_DEVICE(2),
+	EMI_NAND_DEVICE(3),
+	EMI_NAND_DEVICE(4),
+ };
+
+void __init stx7100_configure_nand(struct nand_config_data *data)
+{
+	unsigned int bank_base, bank_end;
+	unsigned int emi_bank = data->emi_bank;
+	unsigned long config[4];
+
+	struct platform_nand_data *nand_private_data =
+		nand_flash[emi_bank].dev.platform_data;
+
+        if (data->rbn_port >= 0) {
+                if (nand_RBn_pio == NULL) {
+                        nand_RBn_pio = stpio_request_pin(data->rbn_port, data->rbn_pin,
+                                         "nand_RBn", STPIO_IN);
+                }
+                if (nand_RBn_pio) {
+                        nand_private_data->ctrl.dev_ready = nand_device_ready;
+                }                           
+        }           
+
+	bank_base = emi_bank_base(emi_bank) + data->emi_withinbankoffset;
+	if (emi_bank == 4)
+		bank_end = 0x07ffffff;
+	else
+		bank_end = emi_bank_base(emi_bank+1) - 1;
+
+	printk(KERN_INFO "Configuring EMI Bank%d for NAND device\n", emi_bank);
+	emi_config_nand(data->emi_bank, data->emi_timing_data);
+	config[0] = 0x00300619;
+	config[1] = 0x8a230000;
+	config[2] = 0x8a130000;
+	config[3] = 0x00;
+	emi_bank_configure(1, config);
+
+	config[0] = 0x00300619;
+	config[1] = 0x8a230000;
+	config[2] = 0x8a230000;
+	config[3] = 0x00;
+	emi_bank_configure(2, config);
+
+	emi_config_pcmode(1, 0);
+	emi_config_pcmode(2, 0);
+
+	nand_flash[emi_bank].resource[0].start = bank_base;
+	nand_flash[emi_bank].resource[0].end = bank_end;
+
+	nand_private_data->chip.chip_delay = data->chip_delay;
+	nand_private_data->chip.partitions = data->mtd_parts;
+	nand_private_data->chip.nr_partitions = data->nr_parts;
+
+	platform_device_register(&nand_flash[emi_bank]);
+}
+
+
+
 /* FDMA resources --------------------------------------------------------- */
 
 static struct stm_plat_fdma_fw_regs stm_fdma_firmware_7100 = {
 	.rev_id    = 0x8000 + (0x000 << 2), /* 0x8000 */
 	.cmd_statn = 0x8000 + (0x010 << 2), /* 0x8040 */
+	.req_ctln  = 0x9780, 
 	.ptrn      = 0x8000 + (0x460 << 2), /* 0x9180 */
 	.cntn      = 0x8000 + (0x462 << 2), /* 0x9188 */
 	.saddrn    = 0x8000 + (0x463 << 2), /* 0x918c */
diff -rupN linux-sh4-orig/drivers/stm/stx7100_comms.c linux-sh4/drivers/stm/stx7100_comms.c
--- linux-sh4-orig/drivers/stm/stx7100_comms.c	2015-11-05 21:54:49.000000000 +0100
+++ linux-sh4/drivers/stm/stx7100_comms.c	2014-07-25 00:59:54.000000000 +0200
@@ -226,12 +226,12 @@ static struct stm_pad_config stx7100_ssc
 			STM_PAD_PIO_BIDIR_NAMED(2, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(2, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC0_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 1, 1, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+		//	/* DVO_OUT_ON = 0 (SSC not DVO) */
+		//	STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[1] = {
@@ -345,7 +345,7 @@ int __init stx7100_configure_ssc_i2c(int
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
diff -rupN linux-sh4-orig/drivers/stm/stx7100_hispeed.c linux-sh4/drivers/stm/stx7100_hispeed.c
--- linux-sh4-orig/drivers/stm/stx7100_hispeed.c	2015-11-05 21:54:49.000000000 +0100
+++ linux-sh4/drivers/stm/stx7100_hispeed.c	2014-07-25 00:59:54.000000000 +0200
@@ -193,6 +193,12 @@ static int stx7100_usb_pad_claim(struct
 	stx7100_usb_pwr_gpio = stm_pad_gpio_request_output(state, "PWR", 1);
 	BUG_ON(stx7100_usb_pwr_gpio == STM_GPIO_INVALID);
 
+	//reset usb on boot - some DVB-T dongles (as102) need it to work properly.
+	gpio_set_value(stx7100_usb_pwr_gpio, 0);
+	mdelay(2000);
+	gpio_set_value(stx7100_usb_pwr_gpio, 1);
+	mdelay(600);
+
 	return 0;
 }
 
diff -rupN linux-sh4-orig/include/linux/libata.h linux-sh4/include/linux/libata.h
--- linux-sh4-orig/include/linux/libata.h	2015-11-05 21:54:51.000000000 +0100
+++ linux-sh4/include/linux/libata.h	2014-07-25 00:59:24.000000000 +0200
@@ -52,6 +52,7 @@
  * compile-time options: to be removed as soon as all the drivers are
  * converted to the new debugging mechanism
  */
+//#define ATA_DEBUG
 #undef ATA_DEBUG		/* debugging output */
 #undef ATA_VERBOSE_DEBUG	/* yet more debugging output */
 #undef ATA_IRQ_TRAP		/* define to ack screaming irqs */
@@ -884,8 +885,72 @@ struct ata_port_operations {
 	 * fields must be pointers.
 	 */
 	const struct ata_port_operations	*inherits;
+	
+	unsigned char (*readb)(const volatile void __iomem *addr);
+	unsigned short (*readw)(const volatile void __iomem *addr);
+	void (*writeb)(unsigned char b, volatile void __iomem *addr);
+	void (*writew)(unsigned short b, volatile void __iomem *addr);
 };
 
+static inline u8 sata_readb(struct ata_port *ap, const volatile void __iomem *addr)
+{
+	u8 r;
+	if (ap->ops->readb)
+		r = (ap->ops->readb)(addr);
+	else
+		r = readb(addr);
+
+	return r;
+}
+
+static inline u16 sata_readw(struct ata_port *ap, const volatile void __iomem *addr)
+{
+	u16 r;
+	if (ap->ops->readw)
+		r = (ap->ops->readw)(addr);
+	else
+		r = readw(addr);
+
+	return r;
+}
+
+static inline void sata_writeb(struct ata_port *ap, u8 b, volatile void __iomem *addr)
+{
+	if (ap->ops->writeb)
+		(ap->ops->writeb)(b, addr);
+	else
+		writeb(b, addr);
+}
+
+static inline void sata_writew(struct ata_port *ap, u16 b, volatile void __iomem *addr)
+{
+	if (ap->ops->writew)
+		(ap->ops->writew)(b, addr);
+	else
+		writew(b, addr);
+}
+
+#undef readb
+#define readb(a_)	sata_readb(ap, a_)
+#undef writeb
+#define writeb(v_,a_)	sata_writeb(ap, v_, a_)
+#undef readw
+#define readw(a_)	sata_readw(ap, a_)
+#undef writew
+#define writew(v_,a_)	sata_writew(ap, v_, a_)
+
+/* overwrite the original definition from io.h */
+#undef __raw_readb
+#define __raw_readb(a_)		readb(a_)
+#undef __raw_writeb
+#define __raw_writeb(v_,a_)	writeb(v_,a_)
+#undef __raw_readw
+#define __raw_readw(a_)		readw(a_)
+#undef __raw_writew
+#define __raw_writew(v_,a_)	writew(v_,a_)
+
+
+
 struct ata_port_info {
 	unsigned long		flags;
 	unsigned long		link_flags;
diff -rupN linux-sh4-orig/include/linux/stm/nand.h linux-sh4/include/linux/stm/nand.h
--- linux-sh4-orig/include/linux/stm/nand.h	2015-11-05 21:54:51.000000000 +0100
+++ linux-sh4/include/linux/stm/nand.h	2014-07-25 00:59:26.000000000 +0200
@@ -69,4 +69,48 @@ struct stm_nand_bank_data {
 	int			timing_relax;
 };
 
+
+/* NAND configuration data */
+struct nand_config_data {
+	unsigned int emi_bank;			/* EMI Bank#			*/
+	unsigned int emi_withinbankoffset;	/* Offset within EMI Bank	*/
+	void *emi_timing_data;			/* Timing data for EMI config   */
+	void *mtd_parts;			/* MTD partition table		*/
+	unsigned int chip_delay;		/* Read busy time for NAND chip */
+	int nr_parts;				/* Number of partitions		*/
+	int rbn_port;				/*  # : 'nand_RBn' PIO port #   */
+						/* -1 : if unconnected		*/
+	int rbn_pin;			        /*      'nand_RBn' PIO pin      */
+						/* (assumes shared RBn signal   */
+						/*  for multiple chips)		*/
+};
+
+#define EMI_NAND_DEVICE(_id)							\
+{										\
+	.name		= "gen_nand",						\
+	.id		= _id,							\
+	.num_resources	= 1,							\
+	.resource	= (struct resource[]) {					\
+		{								\
+			.flags		= IORESOURCE_MEM,			\
+		}								\
+	},									\
+	.dev		= {							\
+		.platform_data	= &(struct platform_nand_data) {		\
+			.chip		=					\
+			{							\
+				.nr_chips		= 1,			\
+				.options		= NAND_NO_AUTOINCR,	\
+				.part_probe_types 	= nand_part_probes,	\
+			},							\
+			.ctrl		=					\
+			{							\
+				.cmd_ctrl		= nand_cmd_ctrl,	\
+				.write_buf		= nand_write_buf,	\
+				.read_buf		= nand_read_buf,	\
+			}							\
+		}								\
+	}									\
+}
+
 #endif /* __LINUX_STM_NAND_H */
diff -rupN linux-sh4-orig/include/linux/stm/stx7100.h linux-sh4/include/linux/stm/stx7100.h
--- linux-sh4-orig/include/linux/stm/stx7100.h	2015-11-05 21:54:51.000000000 +0100
+++ linux-sh4/include/linux/stm/stx7100.h	2014-07-25 00:59:26.000000000 +0200
@@ -91,5 +91,6 @@ struct stx7100_pata_config {
 };
 void stx7100_configure_pata(struct stx7100_pata_config *config);
 
+void stx7100_configure_nand(struct nand_config_data *config);
 
 #endif
diff -rupN linux-sh4-orig/drivers/mtd/nand/Kconfig linux-sh4/drivers/mtd/nand/Kconfig
--- linux-sh4-orig/drivers/mtd/nand/Kconfig	2015-11-05 21:54:47.000000000 +0100
+++ linux-sh4/drivers/mtd/nand/Kconfig	2014-07-25 01:00:13.000000000 +0200
@@ -497,6 +497,7 @@ config STM_NAND_BCH_DEBUG
 config MTD_NAND_STM_EMI
 	tristate "STMicroelectronics: EMI 'bit-banging'"
 	depends on MTD_NAND
+	depends on (CPU_SUBTYPE_STX7100)
 	help
 	  Enables the STMicroelectronics NAND driver for platforms in which the
 	  device is connected via an EMI bank.
